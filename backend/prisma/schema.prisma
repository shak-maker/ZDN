generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Report {
  id                 Int            @id @default(autoincrement())
  contractNo         String?        @map("contract_no")
  customer           String?
  dischargeCommenced DateTime?      @map("discharge_commenced")
  dischargeCompleted DateTime?      @map("discharge_completed")
  fullCompleted      DateTime?      @map("full_completed")
  handledBy          String?        @map("handled_by")
  inspector          String?
  location           String?
  object             String?
  product            String?
  reportDate         DateTime?      @map("report_date")
  reportNo           String         @unique @map("report_no")
  jsonData           Json           @map("json_data")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  auditLogs          AuditLog[]
  reportDetails      ReportDetail[]

  @@map("reports")
}

model ReportDetail {
  id                        Int     @id @default(autoincrement())
  reportId                  Int     @map("report_id")
  actualDensity             Float?  @map("actual_density")
  zdnmt                     Float?
  densityAt20c              Float?  @map("density_at_20c")
  govLiters                 Int?    @map("gov_liters")
  rtcNo                     String? @map("rtc_no")
  rwbmtGross                Float?  @map("rwbmt_gross")
  rwbNo                     String? @map("rwb_no")
  sealNo                    String? @map("seal_no")
  tovLiters                 Int?    @map("tov_liters")
  temperatureC              Float?  @map("temperature_c")
  type                      String?
  waterLiters               Int?    @map("water_liters")
  differenceZdnRwbmt        Float?  @map("difference_zdn_rwbmt")
  differenceZdnRwbmtPercent Float?  @map("difference_zdn_rwbmt_percent")
  dipSm                     Float?  @map("dip_sm")
  waterSm                   Float?  @map("water_sm")
  report                    Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId], map: "report_details_report_id_fkey")
  @@map("report_details")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  email     String?    @unique
  password  String
  role      UserRole   @default(USER)
  isActive  Boolean    @default(true) @map("is_active")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  fullName  String?    @map("full_name")
  auditLogs AuditLog[]

  @@map("users")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  name        String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("api_keys")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  reportId  Int?     @map("report_id")
  action    String
  details   Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  report    Report?  @relation(fields: [reportId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([reportId], map: "audit_logs_report_id_fkey")
  @@index([userId], map: "audit_logs_user_id_fkey")
  @@map("audit_logs")
}

enum UserRole {
  ADMIN
  USER
}
